// SPDX-FileCopyrightText: 2022 Veritius
// SPDX-FileCopyrightText: 2023 Morb
// SPDX-FileCopyrightText: 2023 metalgearsloth
// SPDX-FileCopyrightText: 2024 VMSolidus
// SPDX-FileCopyrightText: 2025 portfiend
// SPDX-FileCopyrightText: 2025 sleepyyapril
//
// SPDX-License-Identifier: AGPL-3.0-or-later AND MIT

using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.FlavorText
{
    [GenerateTypedNameReferences]
    public sealed partial class FlavorText : Control
    {
        public Action<string>? OnSfwFlavorTextChanged;
        public Action<string>? OnSelfFlavorTextChanged;
        public Action<string>? OnNsfwFlavorTextChanged;
        public Action<string>? OnCharacterConsentChanged;

        public FlavorText()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            var loc = IoCManager.Resolve<ILocalizationManager>();

            FlavorTextSFWDetail.SetTitle(loc.GetString("flavor-text-sfw-title-label"));
            FlavorTextSFWDetail.SetPlaceholder(loc.GetString("flavor-text-placeholder"));
            FlavorTextSFWDetail.OnFlavorTextChanged += text => { OnSfwFlavorTextChanged?.Invoke(text); };

            FlavorTextSelfDetail.SetTitle(loc.GetString("flavor-text-self-title"));
            FlavorTextSelfDetail.SetDescription(loc.GetString("flavor-text-self-description"));
            FlavorTextSelfDetail.SetPlaceholder(loc.GetString("flavor-text-self-placeholder"));
            FlavorTextSelfDetail.OnFlavorTextChanged += text => { OnSelfFlavorTextChanged?.Invoke(text); };

            FlavorTextNSFWDetail.SetTitle(loc.GetString("flavor-text-nsfw-title-label"));
            FlavorTextNSFWDetail.SetDescription(loc.GetString("flavor-text-nsfw-description"));
            FlavorTextNSFWDetail.SetPlaceholder(loc.GetString("flavor-text-nsfw-placeholder"));
            FlavorTextNSFWDetail.OnFlavorTextChanged += text => { OnNsfwFlavorTextChanged?.Invoke(text); };

            FlavorTextConsent.SetTitle(loc.GetString("flavor-text-consent-title-label"));
            FlavorTextConsent.SetDescription(loc.GetString("flavor-text-consent-description"));
            FlavorTextConsent.SetPlaceholder(loc.GetString("character-consent-placeholder"));
            FlavorTextConsent.OnFlavorTextChanged += text => { OnCharacterConsentChanged?.Invoke(text); };

            TabSFW.Orphan();
            TabNSFW.Orphan();
            TabCharacterConsent.Orphan();

            FlavorTextTabs.AddTab(TabSFW, loc.GetString("flavor-text-title"));
            FlavorTextTabs.AddTab(TabNSFW, loc.GetString("flavor-text-nsfw-title"));
            FlavorTextTabs.AddTab(TabCharacterConsent, loc.GetString("character-consent-title"));
        }

        public void SetProfile(HumanoidCharacterProfile? profile)
        {
            FlavorTextSFWDetail.SetInputText(profile?.FlavorText ?? "");
            FlavorTextSelfDetail.SetInputText(profile?.SelfExamineFlavorText ?? "");
            FlavorTextNSFWDetail.SetInputText(profile?.NsfwFlavorText ?? "");
            FlavorTextConsent.SetInputText(profile?.CharacterConsent ?? "");
        }
    }
}
