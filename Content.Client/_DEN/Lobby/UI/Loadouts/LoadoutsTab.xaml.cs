using System.Linq;
using Content.Client._DEN.Lobby.UI.Controls;
using Content.Shared.CCVar;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Clothing.Loadouts.Systems;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;

namespace Content.Client._DEN.Lobby.UI.Loadouts;

[GenerateTypedNameReferences]
public sealed partial class LoadoutsTab : BoxContainer
{
    [Dependency] private readonly IConfigurationManager _configuration = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    /// <summary>
    ///     Fired when a loadout preference changes, prompting the character editor to update the profile.
    /// </summary>
    public event Action<LoadoutPreference>? OnPreferenceChanged;

    private LoadoutsCategoryPanel _categoryPanel;
    private LoadoutsItemListPanel _itemListPanel;
    private LoadoutsCustomizationPanel _customizationPanel;

    private HumanoidCharacterProfile? _profile = null;
    private int MaxPoints => _configuration.GetCVar(CCVars.GameLoadoutsPoints);
    private LoadoutPreference? CurrentlyCustomizing => _customizationPanel.Preference;

    public LoadoutsTab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _categoryPanel = new();
        _itemListPanel = new();
        _customizationPanel = new();

        LoadoutConfigPanels.AddChild(_categoryPanel);
        LoadoutConfigPanels.AddChild(_itemListPanel);
        LoadoutConfigPanels.AddChild(_customizationPanel);

        _itemListPanel.OnPointsUpdaated += UpdatePointsDisplay;
        _itemListPanel.OnCustomizeToggled += ToggleCustomizePreference;
        _itemListPanel.OnPreferenceChanged += UpdateLoadoutPreference;
        _itemListPanel.OnPreferenceChanged += p =>
        {
            // If we're equipping a new loadout
            if (p.Selected)
            {
                SetCustomizePreference(p);
                return;
            }

            // If we're unequipping the loadout that we're currently customizing
            if (CurrentlyCustomizing?.LoadoutName == p.LoadoutName)
                SetCustomizePreference(null);
        };

        _categoryPanel.OnCategorySelected += _itemListPanel.SetVisibleCategory;
        _categoryPanel.SelectLoadoutCategory(null, true);

        _customizationPanel.OnCustomizationSaved += UpdateLoadoutPreference;
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
        _itemListPanel.SetProfile(profile);

        if (CurrentlyCustomizing?.LoadoutName != null
            && _profile?.LoadoutPreferences != null
            && _profile.LoadoutPreferences.Count > 0)
        {
            var newPref = _profile.LoadoutPreferences
                .FirstOrDefault(p => p.LoadoutName == CurrentlyCustomizing.LoadoutName);

            if (newPref != null)
                SetCustomizePreference(newPref);
        }
    }

    public void SetPreviewDummy(EntityUid? dummy)
    {
        _itemListPanel.SetCharacterDummy(dummy);
    }

    private void SetCustomizePreference(LoadoutPreference? preference)
    {
        _customizationPanel.Preference = preference;
        EntityUid? previewSprite = null;

        if (preference != null
            && _prototype.TryIndex<LoadoutPrototype>(preference.LoadoutName, out var loadout))
            previewSprite = _itemListPanel.GetPreviewEntity(loadout);

        _customizationPanel.SetPreviewSprite(previewSprite);
    }

    private void ToggleCustomizePreference(LoadoutPreference preference)
    {
        var newPreference = CurrentlyCustomizing?.LoadoutName == preference.LoadoutName
            ? null
            : preference;

        SetCustomizePreference(newPreference);
    }

    public void Reset()
    {
        SetCustomizePreference(null);
        _itemListPanel.PopulateLoadouts(reset: true);
    }

    private void UpdateLoadoutPreference(LoadoutPreference preference)
    {
        OnPreferenceChanged?.Invoke(preference);
    }

    private void UpdatePointsDisplay(int points)
    {
        PointsLabel.Text = Loc.GetString("humanoid-profile-editor-loadouts-points-label",
            ("points", points),
            ("max", MaxPoints));
        PointsBar.MaxValue = MaxPoints;
        PointsBar.Value = points;
    }

    public static string GetCategoryName(string categoryId) => Loc.GetString($"loadout-category-{categoryId}");
}
