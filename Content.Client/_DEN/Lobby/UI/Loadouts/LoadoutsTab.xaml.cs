using System.Linq;
using System.Reflection.Metadata.Ecma335;
using Content.Client._DEN.Lobby.UI.Controls;
using Content.Shared.CCVar;
using Content.Shared.Clothing.Loadouts.Systems;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;

namespace Content.Client._DEN.Lobby.UI.Loadouts;

[GenerateTypedNameReferences]
public sealed partial class LoadoutsTab : BoxContainer
{
    [Dependency] private readonly IConfigurationManager _configuration = default!;

    /// <summary>
    ///     Fired when a loadout preference changes.
    /// </summary>
    public event Action<LoadoutPreference>? OnPreferenceChanged;

    private LoadoutsCategoryPanel _categoryPanel;
    private LoadoutsItemListPanel _itemListPanel;

    private HumanoidCharacterProfile? _profile = null;
    private int MaxPoints => _configuration.GetCVar(CCVars.GameLoadoutsPoints);

    public LoadoutsTab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _categoryPanel = new LoadoutsCategoryPanel();
        _itemListPanel = new LoadoutsItemListPanel();

        LoadoutConfigPanels.AddChild(_categoryPanel);
        LoadoutConfigPanels.AddChild(_itemListPanel);

        _itemListPanel.OnPointsUpdaated += UpdatePointsDisplay;
        _itemListPanel.OnPreferenceChanged += UpdateLoadoutPreference;

        _categoryPanel.OnCategorySelected += _itemListPanel.SetVisibleCategory;
        _categoryPanel.SelectLoadoutCategory(null, true);
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
        _itemListPanel.SetProfile(profile);
    }

    public void SetPreviewDummy(EntityUid? dummy)
    {
        _itemListPanel.SetCharacterDummy(dummy);
    }

    public void Reset()
    {
        _itemListPanel.PopulateLoadouts(reset: true);
    }

    private void UpdateLoadoutPreference(LoadoutPreference preference)
    {
        OnPreferenceChanged?.Invoke(preference);
    }

    private void UpdatePointsDisplay(int points)
    {
        PointsLabel.Text = Loc.GetString("humanoid-profile-editor-loadouts-points-label",
            ("points", points),
            ("max", MaxPoints));
        PointsBar.MaxValue = MaxPoints;
        PointsBar.Value = points;
    }

    public static string GetCategoryName(string categoryId) => Loc.GetString($"loadout-category-{categoryId}");
}
