using System.Linq;
using Content.Client.Administration.UI;
using Content.Client.Lobby;
using Content.Client.Lobby.UI;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Content.Shared.Clothing.Components;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Clothing.Loadouts.Systems;
using Content.Shared.Customization.Systems;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client._DEN.Lobby.UI.Loadouts;

[GenerateTypedNameReferences]
public sealed partial class LoadoutsPanel : BoxContainer
{
    [Dependency] private readonly IConfigurationManager _configuration = default!;
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly JobRequirementsManager _jobRequirements = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    private readonly CharacterRequirementsSystem _characterRequirements;
    private readonly LobbyUIController _lobbyUI;

    private Dictionary<LoadoutPrototype, bool> _loadoutData = new();
    private HashSet<LoadoutPreferenceSelector> _preferenceSelectors = new();
    private Dictionary<string, EntityUid> _loadoutDummies = new();
    private Dictionary<Button, ConfirmationData> _confirmationData = new();
    private Dictionary<ProtoId<LoadoutPrototype>, LoadoutPreferenceSelector> _selectorLookup = new();
    private Dictionary<string, LoadoutPreference> _profilePreferenceLookup = new();

    private HumanoidCharacterProfile? _profile;
    private EntityUid? _dummy;
    private bool _showUnusable = false;
    private int _maxPoints = 0;

    public event Action<Dictionary<LoadoutPrototype, bool>>? OnRemoveUnusableAction;
    public event Action<LoadoutPreference, bool>? OnLoadoutSelectedAction;

    // TODO: This probably should be broken up into even smaller classes

    public LoadoutsPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _lobbyUI = UserInterfaceManager.GetUIController<LobbyUIController>();
        _characterRequirements = _entitySystem.GetEntitySystem<CharacterRequirementsSystem>();

        LoadoutsShowUnusableButton.OnToggled += args => SetShowUnusable(args.Pressed);
        LoadoutsRemoveUnusableButton.OnPressed += _ => TryRemoveUnusableLoadouts();
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
        UpdateLoadouts();
    }

    public void SetPreviewDummy(EntityUid dummy)
    {
        _dummy = dummy;
    }

    private void SetShowUnusable(bool unusable)
    {
        _showUnusable = unusable;
        UpdateLoadouts();
    }

    private void TryRemoveUnusableLoadouts()
    {
        if (!AdminUIHelpers.TryConfirm(LoadoutsRemoveUnusableButton, _confirmationData))
            return;

        OnRemoveUnusableAction?.Invoke(GetUnusableLoadouts());
    }

    /// <summary>
    /// Updates all UI controls that rely on the currently selected loadout preferences of this profile.
    /// </summary>
    private void UpdateLoadoutPreferences()
    {
        UpdatePreferenceSelectors();
        UpdatePointsRemainingBar();
        UpdateUnusableLoadoutCount();
        LoadoutsTabs.UpdateTabMerging();
    }

    /// <summary>
    ///  Recalculates and displays the amount of points the player has left.
    /// </summary>
    private void UpdatePointsRemainingBar()
    {
        _maxPoints = _configuration.GetCVar(CCVars.GameLoadoutsPoints);
        var points = _maxPoints;

        if (_profile?.LoadoutPreferences != null)
            foreach (var pref in _profile.LoadoutPreferences)
            {
                if (_selectorLookup.TryGetValue(pref.LoadoutName, out var selector)
                    && selector.Preference.Selected)
                    points -= selector.Loadout.Cost;
            }

        LoadoutPointsLabel.Text = Loc.GetString("humanoid-profile-editor-loadouts-points-label",
            ("points", points),
            ("max", _maxPoints));
        LoadoutPointsBar.MaxValue = _maxPoints;
        LoadoutPointsBar.Value = points;
    }

    private void UpdateUnusableLoadoutCount()
    {
        var selectedLoadouts = _preferenceSelectors
            .Where(lps => lps.Preference.Selected)
            .Select(lps => lps.Loadout)
            .ToHashSet();

        var unusableCount = GetUnusableLoadouts().Count();

        LoadoutsRemoveUnusableButton.Text = Loc.GetString(
            "humanoid-profile-editor-loadouts-remove-unusable-button",
            ("count", unusableCount)
        );

        AdminUIHelpers.RemoveConfirm(LoadoutsRemoveUnusableButton, _confirmationData);
    }

    private void UpdatePreferenceSelectors()
    {
        _profilePreferenceLookup = _profile?.LoadoutPreferences?
            .ToDictionary(lp => lp.LoadoutName)
            ?? new Dictionary<string, LoadoutPreference>();

        foreach (var selector in _preferenceSelectors)
        {
            CopyProfilePreference(selector);

            if (_loadoutData.TryGetValue(selector.Loadout, out var usable))
                UpdateLoadoutSelector(selector, usable);
        }
    }

    public void UpdateLoadouts(bool reload = false)
    {

        if (reload)
            ClearLoadoutTabs();

        var mainJob = _lobbyUI.GetPreferredJob(_profile
            ?? HumanoidCharacterProfile.DefaultWithSpecies())
            ?? new JobPrototype();
        var profile = _profile ?? HumanoidCharacterProfile.DefaultWithSpecies();

        PopulateLoadoutData(mainJob, profile);

        if (_loadoutData.Count == 0)
        {
            BuildNoLoadoutsInterface();
            return;
        }

        BuildLoadoutTabs(mainJob, profile);
        UpdateLoadoutPreferences();
    }

    private void UpdateLoadoutSelector(LoadoutPreferenceSelector selector, bool usable)
    {
        selector.Valid = usable;
        selector.ShowUnusable = _showUnusable;

        foreach (var (item, index) in selector.Loadout.Items.Select((item, index) => (item, index)))
        {
            var key = $"{selector.Loadout.ID}_{index}";
            var entity = EnsureLoadoutDummy(item, key);

            selector.Wearable = !_entity.HasComponent<ClothingComponent>(entity)
                || _dummy != null
                && _characterRequirements.CanEntityWearItem(_dummy.Value, entity);
        }
    }

    private void PopulateLoadoutData(JobPrototype mainJob, HumanoidCharacterProfile profile)
    {
        _loadoutData.Clear();

        var playtimeTrackers = _jobRequirements.GetRawPlayTimeTrackers();
        var whitelisted = _jobRequirements.IsWhitelisted();

        foreach (var loadoutProto in _prototype.EnumeratePrototypes<LoadoutPrototype>())
        {
            var usable = _characterRequirements.CheckRequirementsValid(
                loadoutProto.Requirements,
                mainJob,
                profile,
                playtimeTrackers,
                whitelisted,
                loadoutProto,
                _entity,
                _prototype,
                _configuration,
                out _
            );

            _loadoutData.Add(loadoutProto, usable);
        }
    }

    private void BuildNoLoadoutsInterface()
    {
        var noLoadoutsLabel = new Label
        {
            Text = Loc.GetString("humanoid-profile-editor-loadouts-no-loadouts")
        };

        LoadoutsTabs.AddTab(noLoadoutsLabel, Loc.GetString("loadout-category-Uncategorized"));
    }

    private void BuildLoadoutTabs(JobPrototype mainJob, HumanoidCharacterProfile profile)
    {
        var uncategorizedTab = LoadoutsTabs
            .Contents
            .OfType<BoxContainer>()
            .FirstOrDefault(c => c.Name == "Uncategorized");
        uncategorizedTab ??= AddTabToContainer("Uncategorized", LoadoutsTabs);

        var loadoutCategories = _prototype.EnumeratePrototypes<LoadoutCategoryPrototype>();
        var rootCategories = loadoutCategories
            .Where(c => c.Root)
            .OrderBy(c => Loc.GetString($"loadout-category-{c.ID}"))
            .ToList();

        var categoryTree = CreateTree(rootCategories);
        var categories = new Dictionary<string, object>();

        foreach (var (key, value) in categoryTree)
            categories.Add(key, value);

        BuildCategoryContainer(categories, LoadoutsTabs);
        PopulateCategoryTabs(mainJob, profile, uncategorizedTab);
        HideEmptyTabs(loadoutCategories.ToList());
    }

    private void ClearLoadoutTabs()
    {
        foreach (var tab in LoadoutsTabs.Tabs)
            LoadoutsTabs.RemoveTab(tab);

        foreach (var uid in _loadoutDummies)
            _entity.QueueDeleteEntity(uid.Value);

        _preferenceSelectors.Clear();
        _selectorLookup.Clear();
    }

    private LoadoutPreferenceSelector BuildNewSelector(LoadoutPrototype loadout,
        JobPrototype mainJob,
        HumanoidCharacterProfile profile,
        bool usable)
    {
        var newSelector = new LoadoutPreferenceSelector(
            loadout,
            mainJob,
            profile,
            ref _loadoutDummies,
            _entity,
            _prototype,
            _configuration,
            _characterRequirements,
            _jobRequirements)
        {
            Preference = new(loadout.ID)
        };

        UpdateLoadoutSelector(newSelector, usable);
        AddLoadoutSelector(newSelector);

        return newSelector;
    }

    private void BuildCategoryContainer(Dictionary<string, object> tree, NeoTabContainer parent)
    {
        foreach (var (key, value) in tree)
        {
            if (parent.Contents.Any(c => c.Name == key))
                continue;

            if (value is List<LoadoutPrototype>)
                AddTabToContainer(key, parent);
            else
            {
                var category = new NeoTabContainer
                {
                    Name = key,
                    HorizontalExpand = true,
                    VerticalExpand = true,
                    SeparatorMargin = new Thickness(0),
                };

                parent.AddTab(category, Loc.GetString($"loadout-category-{key}"));
                BuildCategoryContainer((Dictionary<string, object>) value, category);
            }
        }
    }

    /// <summary>
    /// Iterates over every loadout selector and inserts them into the associated loadout category tab.
    /// </summary>
    /// <param name="mainJob">The highest job of the character.</param>
    /// <param name="profile">The HumanoidCharacterProfile data associated with the character.</param>
    /// <param name="uncategorizedTab">The container for uncategorized loadout items.</param>
    private void PopulateCategoryTabs(JobPrototype mainJob,
        HumanoidCharacterProfile profile,
        BoxContainer uncategorizedTab)
    {
        var orderedLoadouts = _loadoutData.OrderBy(l => l.Key.ID).ToList();
        var existingLoadoutIds = _preferenceSelectors.Select(lps => lps.Loadout.ID).ToHashSet();
        _profilePreferenceLookup = _profile?.LoadoutPreferences?
            .ToDictionary(lp => lp.LoadoutName)
            ?? new Dictionary<string, LoadoutPreference>();

        foreach (var (loadout, usable) in orderedLoadouts)
        {
            if (existingLoadoutIds.Contains(loadout.ID)
                && _selectorLookup.TryGetValue(loadout.ID, out var selector))
            {
                CopyProfilePreference(selector);
                UpdateLoadoutSelector(selector, usable);
                continue;
            }

            var newSelector = BuildNewSelector(loadout, mainJob, profile, usable);
            var categoryContainer = FindCategoryTab(loadout.Category, LoadoutsTabs) ?? uncategorizedTab;
            var contentContainer = categoryContainer.Children.First().Children.First();
            contentContainer.AddChild(newSelector);
        }
    }

    private BoxContainer AddTabToContainer(string name, NeoTabContainer parent)
    {
        var tabContent = new BoxContainer
        {
            Orientation = LayoutOrientation.Vertical,
            HorizontalExpand = true,
            VerticalExpand = true,
        };

        var scroll = new ScrollContainer
        {
            HScrollEnabled = false,
            HorizontalExpand = true,
            VerticalExpand = true,
            Children = { tabContent },
        };

        var tab = new BoxContainer
        {
            Name = name,
            Orientation = LayoutOrientation.Vertical,
            HorizontalExpand = true,
            VerticalExpand = true,
            Children = { scroll },
        };

        parent.AddTab(tab, Loc.GetString($"loadout-category-{name}"));
        return tab;
    }

    private void AddLoadoutSelector(LoadoutPreferenceSelector selector)
    {
        _preferenceSelectors.Add(selector);
        _selectorLookup.Add(selector.Loadout.ID, selector);

        selector.PreferenceChanged += preference =>
        {
            var isSelected = preference.Selected;
            var loadout = selector.Loadout;
            var selected = isSelected
                ? ValidateSelection(-loadout.Cost, isSelected)
                : ValidateSelection(loadout.Cost, isSelected);

            OnLoadoutSelectedAction?.Invoke(preference, selected);
        };
    }

    private Dictionary<string, object> CreateTree(List<LoadoutCategoryPrototype> loadoutCategories)
    {
        var tree = new Dictionary<string, object>();
        foreach (var category in loadoutCategories)
        {
            if (tree.ContainsKey(category.ID))
                continue;

            var subCategories = category.SubCategories
                .Where(subCategory => !tree.ContainsKey(subCategory))
                .ToList();

            if (subCategories.Count == 0)
            {
                tree.Add(category.ID, new List<LoadoutPrototype>());
                continue;
            }

            var subCategoryTree = CreateTree(subCategories
                .Select(c => _prototype.Index(c))
                .ToList());
            tree.Add(category.ID, subCategoryTree);
        }

        return tree;
    }

    private void HideEmptyTabs(List<LoadoutCategoryPrototype> categories)
    {
        foreach (var category in categories)
        {
            var tab = FindCategoryTab(category.ID, LoadoutsTabs);
            if (tab == null) continue;

            var contentContainer = tab.Children
                .FirstOrDefault()?
                .Children.FirstOrDefault()?
                .Children;

            var hasContent = contentContainer?.Any() ?? false;

            if (GetTopTabContainer(tab) is NeoTabContainer topContainer)
                topContainer.SetTabVisible(tab, hasContent);

            if (tab.Parent?.Parent is NeoTabContainer parentTab)
                HideEmptyTabs(GetParentCategories(parentTab));
        }
    }

    // TODO: Figure out why this exists
    private void CopyProfilePreference(LoadoutPreferenceSelector selector)
    {
        _profilePreferenceLookup.TryGetValue(selector.Loadout.ID, out var preference);
        var selected = preference?.Selected ?? false;
        preference ??= selector.Preference;

        selector.Preference = new(
            preference.LoadoutName,
            preference.CustomName,
            preference.CustomDescription,
            preference.CustomColorTint,
            preference.CustomHeirloom)
        {
            Selected = selected
        };
    }

    private EntityUid EnsureLoadoutDummy(EntProtoId item, string key)
    {
        if (_loadoutDummies.TryGetValue(key, out var entity)
            && _entity.GetComponent<MetaDataComponent>(entity).EntityPrototype!.ID == item)
            return entity;

        entity = _entity.SpawnEntity(item, MapCoordinates.Nullspace);
        _loadoutDummies[key] = entity;
        return entity;
    }

    private bool ValidateSelection(int cost, bool isSelected)
    {
        var testPoints = LoadoutPointsBar.Value + cost;
        return isSelected ? testPoints >= 0 : testPoints < 0;
    }

    private bool IsLoadoutUnusable(LoadoutPrototype loadout, bool isValid)
    {
        return !isValid
            || _selectorLookup.TryGetValue(loadout.ID, out var selector)
            && !selector.Wearable;
    }

    private NeoTabContainer? GetTopTabContainer(Control tab)
    {
        return tab.Parent?.Parent?.Parent?.Parent as NeoTabContainer;
    }

    private List<LoadoutCategoryPrototype> GetParentCategories(NeoTabContainer parent)
    {
        return parent.Contents
            .Select(c => _prototype.Index<LoadoutCategoryPrototype>(c.Name!))
            .Where(p => p != null)
            .ToList()!;
    }

    private Dictionary<LoadoutPrototype, bool> GetUnusableLoadouts()
    {
        var selectedLoadouts = _preferenceSelectors
            .Where(lps => lps.Preference.Selected)
            .Select(lps => lps.Loadout)
            .ToHashSet();

        var unusableLoadouts = _loadoutData
            .Where(l => selectedLoadouts.Contains(l.Key)
                && IsLoadoutUnusable(l.Key, l.Value))
            .ToDictionary();

        return unusableLoadouts;
    }

    private static BoxContainer? FindCategoryTab(string id, NeoTabContainer parent)
    {
        if (parent.Contents.FirstOrDefault(c => c.Name == id) is BoxContainer match)
            return match;

        return parent.Contents.OfType<NeoTabContainer>()
            .Select(subcategory => FindCategoryTab(id, subcategory))
            .FirstOrDefault(result => result != null);
    }
}
