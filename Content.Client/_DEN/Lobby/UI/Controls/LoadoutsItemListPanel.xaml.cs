using System.Linq;
using Content.Client._DEN.Lobby.UI.Loadouts;
using Content.Client.Resources;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._DEN.Lobby.UI.Controls;

[GenerateTypedNameReferences]
public sealed partial class LoadoutsItemListPanel : ScrollContainer
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    // Dependencies
    // Events
    // Constants
    // Data Lists
    // Private Class Members
    // Public Variables
    // Dynamic Private Variables

    private const string CategoryNameFontPath = "/Fonts/NotoSans/NotoSans-Bold.ttf";
    private const int CategoryNameFontSize = 16;
    private Font CategoryNameFont => _resourceCache.GetFont(CategoryNameFontPath, CategoryNameFontSize);

    private Dictionary<ProtoId<LoadoutCategoryPrototype>, BoxContainer> _categoryLists = new();
    private Dictionary<LoadoutPrototype, LoadoutItemButton> _loadoutButtons = new();
    private ProtoId<LoadoutCategoryPrototype>? _currentCategory = null;

    public LoadoutsItemListPanel()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        CategoryTitle.FontOverride = CategoryNameFont;
        PopulateLoadouts();
    }

    public void PopulateLoadouts()
    {
        var groups = _prototype.EnumeratePrototypes<LoadoutPrototype>()
            .OrderBy(l => l.ID)
            .GroupBy(l => l.Category);

        foreach (var group in groups)
        {
            var category = group.Key;
            if (!_categoryLists.TryGetValue(category, out var listBox))
            {
                listBox = CreateLoadoutListBox(category);
                Content.AddChild(listBox);
                _categoryLists.Add(category, listBox);
            }

            foreach (var loadout in group)
            {
                var button = new LoadoutItemButton(loadout);
                listBox.AddChild(button);
                _loadoutButtons.Add(loadout, button);
            }
        }
    }

    private BoxContainer CreateLoadoutListBox(ProtoId<LoadoutCategoryPrototype> categoryId)
    {
        var listBox = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Stretch,
            Name = "ItemCategory" + categoryId,
            Visible = false,
        };

        return listBox;
    }

    public void SetVisibleCategory(ProtoId<LoadoutCategoryPrototype>? category)
    {
        if (_currentCategory == category)
            return;

        var titleText = string.Empty;

        // Hide previous box
        if (_currentCategory != null
            && _categoryLists.TryGetValue(_currentCategory.Value, out var oldBox))
            oldBox.Visible = false;

        _currentCategory = category;

        // Show new box
        if (_currentCategory != null)
        {
            titleText = LoadoutsTab.GetCategoryName(_currentCategory.Value);
            if (_categoryLists.TryGetValue(_currentCategory.Value, out var listBox))
            {
                listBox.Visible = true;
            }
        }

        CategoryTitle.Text = titleText;
    }
}
