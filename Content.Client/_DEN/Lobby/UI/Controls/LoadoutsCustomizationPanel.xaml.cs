// SPDX-FileCopyrightText: 2025 portfiend
//
// SPDX-License-Identifier: MPL-2.0

using System.Linq;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Clothing.Loadouts.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._DEN.Lobby.UI.Controls;

/// <summary>
///     This panel handles changing customization for individual loadout items
///     - name, description, color tint, and heirloom. It only customizes one item at a time.
/// </summary>
/// <remarks>
///     This gets its own panel so that we only have to make one color slider for the entire
///     loadout tab - the old way of doing things caused major performance issues.
/// </remarks>
[GenerateTypedNameReferences]
public sealed partial class LoadoutsCustomizationPanel : ScrollContainer
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    /// <summary>
    ///     Fired when the loadout customization is saved.
    /// </summary>
    public event Action<LoadoutPreference>? OnCustomizationSaved;

    private readonly Thickness _miscButtonPadding = new(4f);
    private LoadoutPreference? _preference;

    /// <summary>
    ///     The current preference of this loadout item. This includes whether or not it is selected,
    ///     and custom name, description, color tint, and heirloom status.
    /// </summary>
    /// <remarks>
    ///     This does some back-and-forth syncing between this panel and relevant LoadoutItemButtons;
    ///     make sure that when you update the preference of a loadout that's currently being
    ///     customized, it should be synced back here, and vice versa. Customization handles all
    ///     properties of the LoadoutPreference except selection.
    /// </remarks>
    public LoadoutPreference? Preference
    {
        get => _preference;
        set
        {
            _preference = value;
            SetDirty(false);
            UpdateCustomizationFields();
        }
    }

    public LoadoutsCustomizationPanel()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        // adding a little padding to these buttons for flair
        foreach (var child in MiscButtonsBox.Children)
            if (child is CheckBox checkBox)
                AddCheckboxStyle(checkBox);

        AddCheckboxStyle(AllowCustomColorCheckBox);

        CustomNameEdit.OnTextChanged += _ => UpdateDirty();
        CustomDescriptionEdit.OnTextChanged += _ => UpdateDirty();
        CustomColorSliders.OnColorChanged += _ =>
        {
            AllowCustomColorCheckBox.Pressed = true;
            UpdateDirty();
        };
        HeirloomCheckBox.OnToggled += _ => UpdateDirty();
        AllowCustomColorCheckBox.OnToggled += _ => UpdateDirty();

        SaveButton.OnPressed += _ => Save();
        ResetButton.OnPressed += _ => SetFieldsToPreference();
    }

    /// <summary>
    ///     Sets the current preview entity for the loadout being customized.
    /// </summary>
    /// <remarks>
    ///     Note that this entity doesn't really "belong" to the customization panel; it "belongs"
    ///     to a button in LoadoutsItemListPanel. So if you want to modify this entity in any way
    ///     (e.g. changing its paint color), that should be handled in the loadout button rather than
    ///     in here.
    /// </remarks>
    /// <param name="uid">The preview entity to use.</param>
    public void SetPreviewSprite(EntityUid? uid) => PreviewSprite.SetEntity(uid);

    private void AddCheckboxStyle(CheckBox box)
    {
        box.AddStyleClass(ContainerButton.StyleClassButton);
        if (box.Label.Parent is BoxContainer)
            box.Label.Parent.Margin = _miscButtonPadding;
    }

    private void UpdateCustomizationFields()
    {
        if (_preference == null
            || !_prototype.TryIndex<LoadoutPrototype>(_preference.LoadoutName, out var loadout))
        {
            CustomizeItemBox.Visible = false;
            return;
        }

        CustomizeItemBox.Visible = true;
        CustomColorBox.Visible = loadout.CustomColorTint;
        HeirloomCheckBox.Visible = loadout.CanBeHeirloom;

        SetFieldsToPreference();

        var firstItem = loadout.Items.First();
        if (!_prototype.TryIndex<EntityPrototype>(firstItem, out var ent))
            return;

        var name = GetName(ent);
        ItemNameLabel.Text = name;
        CustomNameEdit.PlaceHolder = name;
        CustomDescriptionEdit.Placeholder = new Rope.Leaf(GetDescription(ent));
    }

    private void SetFieldsToPreference()
    {
        CustomNameEdit.Text = _preference?.CustomName ?? string.Empty;
        CustomDescriptionEdit.TextRope = new Rope.Leaf(_preference?.CustomDescription ?? string.Empty);
        CustomColorSliders.Color = Color.FromHex(_preference?.CustomColorTint, Color.White);
        HeirloomCheckBox.Pressed = _preference?.CustomHeirloom ?? false;
        AllowCustomColorCheckBox.Pressed = _preference?.CustomColorTint != null;

        UpdateDirty();
    }

    private void UpdateDirty()
    {
        if (_preference == null)
            return;

        var prefName = _preference.CustomName ?? string.Empty;
        var prefDesc = _preference.CustomDescription ?? string.Empty;
        var prefColor = Color.TryFromHex(_preference?.CustomColorTint)
            ?? (AllowCustomColorCheckBox.Pressed ? Color.White : null);
        var prefHeirloom = _preference?.CustomHeirloom;

        var nameEqual = CustomNameEdit.Text == prefName;
        var descEqual = Rope.Collapse(CustomDescriptionEdit.TextRope) == prefDesc;
        var colorEqual = !CustomColorBox.Visible
            || AllowCustomColorCheckBox.Pressed && CustomColorSliders.Color == prefColor
            || !AllowCustomColorCheckBox.Pressed && prefColor == null;
        var heirloomEqual = !HeirloomCheckBox.Visible
            || HeirloomCheckBox.Pressed == (prefHeirloom ?? false);

        var isEqual = nameEqual && descEqual && colorEqual && heirloomEqual;

        SetDirty(!isEqual);
    }

    private void Save()
    {
        if (_preference == null)
            return;

        var name = CustomNameEdit.Text == string.Empty ? null : CustomNameEdit.Text;
        var desc = Rope.Collapse(CustomDescriptionEdit.TextRope);
        if (desc == string.Empty)
            desc = null;

        var color = CustomColorSliders.Visible && AllowCustomColorCheckBox.Pressed
            ? CustomColorSliders.Color.ToHex()
            : null;
        var heirloom = HeirloomCheckBox.Visible && HeirloomCheckBox.Pressed;

        var newPref = new LoadoutPreference(
            loadoutName: _preference.LoadoutName,
            customName: name,
            customDescription: desc,
            customColorTint: color,
            customHeirloom: heirloom
        )
        {
            Selected = _preference.Selected
        };

        OnCustomizationSaved?.Invoke(newPref);
    }

    private string GetName(EntityPrototype entity)
    {
        var locId = $"loadout-name-{_preference?.LoadoutName}";
        var name = Loc.GetString(locId);

        if (name == locId)
            name = entity.Name ?? name;

        return name;
    }

    private string GetDescription(EntityPrototype entity)
    {
        var locId = $"loadout-description-{_preference?.LoadoutName}";
        var description = Loc.GetString(locId);

        if (description == locId)
            description = entity.Description ?? description;

        return description;
    }

    private void SetDirty(bool dirty)
    {
        SaveButton.Disabled = !dirty;
        ResetButton.Disabled = !dirty;
    }
}
