using System.Linq;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Clothing.Loadouts.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._DEN.Lobby.UI.Controls;

[GenerateTypedNameReferences]
public sealed partial class LoadoutsCustomizationPanel : ScrollContainer
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    /// <summary>
    ///     Fired when the loadout customization is saved.
    /// </summary>
    public event Action<LoadoutPreference>? OnCustomizationSaved;

    private readonly Thickness _miscButtonPadding = new(4f);
    private LoadoutPreference? _preference;

    public LoadoutPreference? Preference
    {
        get => _preference;
        set
        {
            _preference = value;
            SetDirty(false);
            UpdateCustomizationFields();
        }
    }

    public LoadoutsCustomizationPanel()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        // adding a little padding to these buttons for flair
        foreach (var child in MiscButtonsBox.Children)
            if (child is CheckBox checkBox)
            {
                checkBox.AddStyleClass(ContainerButton.StyleClassButton);
                if (checkBox.Label.Parent is BoxContainer)
                    checkBox.Label.Parent.Margin = _miscButtonPadding;
            }

        CustomNameEdit.OnTextChanged += _ => UpdateDirty();
        CustomDescriptionEdit.OnTextChanged += _ => UpdateDirty();
        CustomColorSliders.OnColorChanged += _ => UpdateDirty();
        HeirloomCheckBox.OnToggled += _ => UpdateDirty();

        SaveButton.OnPressed += _ => Save();
        ResetButton.OnPressed += _ => SetFieldsToPreference();
    }

    public void SetPreviewSprite(EntityUid? uid) => PreviewSprite.SetEntity(uid);

    private void UpdateCustomizationFields()
    {
        if (_preference == null
            || !_prototype.TryIndex<LoadoutPrototype>(_preference.LoadoutName, out var loadout))
        {
            CustomizeItemBox.Visible = false;
            return;
        }

        CustomizeItemBox.Visible = true;
        CustomColorBox.Visible = loadout.CustomColorTint;
        HeirloomCheckBox.Visible = loadout.CanBeHeirloom;

        SetFieldsToPreference();

        var firstItem = loadout.Items.First();
        if (!_prototype.TryIndex<EntityPrototype>(firstItem, out var ent))
            return;

        var name = GetName(ent);
        ItemNameLabel.Text = name;
        CustomNameEdit.PlaceHolder = name;
        CustomDescriptionEdit.Placeholder = new Rope.Leaf(GetDescription(ent));
    }

    private void SetFieldsToPreference()
    {
        CustomNameEdit.Text = _preference?.CustomName ?? string.Empty;
        CustomDescriptionEdit.TextRope = new Rope.Leaf(_preference?.CustomDescription ?? string.Empty);
        CustomColorSliders.Color = Color.FromHex(_preference?.CustomColorTint, Color.White);
        HeirloomCheckBox.Pressed = _preference?.CustomHeirloom ?? false;

        UpdateDirty();
    }

    private void UpdateDirty()
    {
        if (_preference == null)
            return;

        var prefName = _preference.CustomName ?? string.Empty;
        var prefDesc = _preference.CustomDescription ?? string.Empty;
        var prefColor = Color.FromHex(_preference?.CustomColorTint, Color.White);
        var prefHeirloom = _preference?.CustomHeirloom;

        var nameEqual = CustomNameEdit.Text == prefName;
        var descEqual = Rope.Collapse(CustomDescriptionEdit.TextRope) == prefDesc;
        var colorEqual = !CustomColorBox.Visible || CustomColorSliders.Color == prefColor;
        var heirloomEqual = !HeirloomCheckBox.Visible || HeirloomCheckBox.Pressed == prefHeirloom;

        var isEqual = nameEqual && descEqual && colorEqual && heirloomEqual;

        SetDirty(!isEqual);
    }

    private void Save()
    {
        if (_preference == null)
            return;

        var name = CustomNameEdit.Text == string.Empty ? null : CustomNameEdit.Text;
        var desc = Rope.Collapse(CustomDescriptionEdit.TextRope);
        if (desc == string.Empty)
            desc = null;

        var color = CustomColorSliders.Visible ? CustomColorSliders.Color.ToHex() : null;
        var heirloom = HeirloomCheckBox.Visible && HeirloomCheckBox.Pressed;

        var newPref = new LoadoutPreference(
            loadoutName: _preference.LoadoutName,
            customName: name,
            customDescription: desc,
            customColorTint: color,
            customHeirloom: heirloom
        )
        {
            Selected = _preference.Selected
        };

        OnCustomizationSaved?.Invoke(newPref);
    }

    private string GetName(EntityPrototype entity)
    {
        var locId = $"loadout-name-{_preference?.LoadoutName}";
        var name = Loc.GetString(locId);

        if (name == locId)
            name = entity.Name ?? name;

        return name;
    }

    private string GetDescription(EntityPrototype entity)
    {
        var locId = $"loadout-description-{_preference?.LoadoutName}";
        var description = Loc.GetString(locId);

        if (description == locId)
            description = entity.Description ?? description;

        return description;
    }

    private void SetDirty(bool dirty)
    {
        SaveButton.Disabled = !dirty;
        ResetButton.Disabled = !dirty;
    }
}
