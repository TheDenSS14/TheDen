
using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Labels.Components;
using Content.Shared.Paint;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client._DEN.Lobby.UI.Controls;

[GenerateTypedNameReferences]
public sealed partial class LoadoutItemButton : ContainerButton
{
    [Dependency] private readonly IEntityManager _entity = default!;

    /// <summary>
    ///     Fired when the loadout is equipped or unequipped.
    /// </summary>
    public event Action<ProtoId<LoadoutPrototype>, bool>? OnLoadoutToggled;

    /// <summary>
    ///     Fired when the "customize" button is clicked for this button.
    /// </summary>
    public event Action<ProtoId<LoadoutPrototype>>? OnCustomizeToggled;

    private const string CheckboxCheckedStyleClass = CheckBox.StyleClassCheckBoxChecked;
    private const string CustomizeButtonStyleClass = StyleNano.StyleClassAltButton;
    private readonly Thickness _customizeButtonPadding = new Thickness(0, 10);

    // Dependencies
    // Events
    // Constants
    // Data Lists
    // Private Class Members
    // Public Variables
    // Dynamic Private Variables

    public LoadoutPrototype Loadout;
    public EntityUid? PreviewEntity { get; private set; }

    public LoadoutItemButton(LoadoutPrototype loadout)
    {
        Loadout = loadout;
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        CustomizeButton.AddStyleClass(CustomizeButtonStyleClass);
        CustomizeButton.Label.Margin = _customizeButtonPadding;

        InitPreview();
        LoadoutNameLabel.Text = GetName();
        CostLabel.Text = Loadout.Cost.ToString();

        OnToggled += v => OnLoadoutToggled?.Invoke(Loadout.ID, v.Pressed);
        OnToggled += _ => UpdateCheckbox();
        CustomizeButton.OnToggled += v => OnCustomizeToggled?.Invoke(Loadout.ID);
    }

    protected override void Deparented()
    {
        if (PreviewEntity != null)
            _entity.QueueDeleteEntity(PreviewEntity);

        base.Deparented();
    }

    private void InitPreview()
    {
        if (PreviewEntity != null)
            _entity.QueueDeleteEntity(PreviewEntity);

        var previewProto = Loadout.Items.First();
        PreviewEntity = _entity.Spawn(previewProto, MapCoordinates.Nullspace);

        if (Loadout.CustomColorTint)
        {
            _entity.EnsureComponent<AppearanceComponent>(PreviewEntity.Value);
            _entity.EnsureComponent<PaintedComponent>(PreviewEntity.Value);
        }

        PreviewSprite.SetEntity(PreviewEntity);
    }

    // This is structured the way it is to reduce redundant style updates.
    private void UpdateCheckbox()
    {
        if (Pressed && !EnabledCheckbox.HasStyleClass(CheckboxCheckedStyleClass))
            EnabledCheckbox.AddStyleClass(CheckboxCheckedStyleClass);
        else if (!Pressed && EnabledCheckbox.HasStyleClass(CheckboxCheckedStyleClass))
            EnabledCheckbox.RemoveStyleClass(CheckboxCheckedStyleClass);

        CustomizeButton.Visible = Pressed;
    }

    private string GetName()
    {
        var locId = $"loadout-name-{Loadout.ID}";
        var name = Loc.GetString(locId);

        if (name == locId && PreviewEntity != null)
            name = _entity.GetComponent<MetaDataComponent>(PreviewEntity.Value).EntityName;

        if (_entity.TryGetComponent<LabelComponent>(PreviewEntity, out var label))
        {
            var itemLabel = label.CurrentLabel;
            if (!string.IsNullOrEmpty(itemLabel))
                name += $" ({Loc.GetString(itemLabel)})";
        }

        return name;
    }
}
