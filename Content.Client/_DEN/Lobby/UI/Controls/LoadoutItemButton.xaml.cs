
using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Clothing.Loadouts.Systems;
using Content.Shared.Labels.Components;
using Content.Shared.Paint;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client._DEN.Lobby.UI.Controls;

[GenerateTypedNameReferences]
public sealed partial class LoadoutItemButton : BoxContainer
{
    [Dependency] private readonly IEntityManager _entity = default!;

    private readonly SharedAppearanceSystem _appearance;

    /// <summary>
    ///     Fired when this button's loadout preference changes (on/off, appearance, etc).
    /// </summary>
    public event Action<LoadoutPreference>? OnPreferenceChanged;

    /// <summary>
    ///     Fired when the "customize" button is clicked for this button.
    /// </summary>
    public event Action<ProtoId<LoadoutPrototype>>? OnCustomizeToggled;

    private const string CheckboxCheckedStyleClass = CheckBox.StyleClassCheckBoxChecked;
    private const string CustomizeButtonStyleClass = StyleNano.StyleClassAltButton;
    private readonly Thickness _customizeButtonPadding = new Thickness(5, 0);

    // Dependencies
    // Events
    // Constants
    // Data Lists
    // Private Class Members
    // Public Variables
    // Dynamic Private Variables

    public LoadoutPrototype Loadout;
    public bool Pressed => ItemToggleButton.Pressed;

    private LoadoutPreference _preference;

    public LoadoutPreference Preference
    {
        get => _preference;
        set
        {
            _preference = value;
            ItemToggleButton.Pressed = value.Selected;
            UpdateCheckbox();
            UpdatePaint();
        }
    }

    public EntityUid? PreviewEntity { get; private set; }

    public LoadoutItemButton(LoadoutPrototype loadout)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _appearance = _entity.System<SharedAppearanceSystem>();

        CustomizeButton.AddStyleClass(CustomizeButtonStyleClass);
        CustomizeButton.Label.Margin = _customizeButtonPadding;

        Loadout = loadout;
        InitPreview();
        Preference = _preference = new(Loadout.ID);


        LoadoutNameLabel.Text = GetName();
        CostLabel.Text = Loadout.Cost.ToString();

        ItemToggleButton.OnToggled += OnButtonToggled;
        ItemToggleButton.OnToggled += _ => UpdateCheckbox();
        CustomizeButton.OnPressed += _ => OnCustomizeToggled?.Invoke(Loadout.ID);
    }

    protected override void Deparented()
    {
        if (PreviewEntity != null)
            _entity.QueueDeleteEntity(PreviewEntity);

        base.Deparented();
    }

    private void InitPreview()
    {
        if (PreviewEntity != null)
            _entity.QueueDeleteEntity(PreviewEntity);

        var previewProto = Loadout.Items.First();
        PreviewEntity = _entity.Spawn(previewProto, MapCoordinates.Nullspace);
        PreviewSprite.SetEntity(PreviewEntity);
    }

    // This is structured the way it is to reduce redundant style updates.
    private void UpdateCheckbox()
    {
        if (ItemToggleButton.Pressed && !EnabledCheckbox.HasStyleClass(CheckboxCheckedStyleClass))
            EnabledCheckbox.AddStyleClass(CheckboxCheckedStyleClass);
        else if (!ItemToggleButton.Pressed && EnabledCheckbox.HasStyleClass(CheckboxCheckedStyleClass))
            EnabledCheckbox.RemoveStyleClass(CheckboxCheckedStyleClass);

        CustomizeButton.Visible = ItemToggleButton.Pressed;
    }

    private void UpdatePaint()
    {
        if (!Preference.Selected || PreviewEntity == null || !Loadout.CustomColorTint)
            return;

        var hasColor = _preference.CustomColorTint != null;
        var appearance = _entity.EnsureComponent<AppearanceComponent>(PreviewEntity.Value);
        if (hasColor)
        {
            var paint = _entity.EnsureComponent<PaintedComponent>(PreviewEntity.Value);
            paint.Enabled = true;
            paint.Color = Color.FromHex(_preference.CustomColorTint);
        }
        else
            _entity.RemoveComponent<PaintedComponent>(PreviewEntity.Value);

        _appearance.TryGetData(PreviewEntity.Value, PaintVisuals.Painted, out bool isPainted, appearance);
        _appearance.SetData(PreviewEntity.Value, PaintVisuals.Painted, !isPainted, appearance);
    }

    private void OnButtonToggled(BaseButton.ButtonToggledEventArgs args)
    {
        _preference.Selected = args.Pressed;
        OnPreferenceChanged?.Invoke(_preference);
    }

    public void SetSelected(bool selected)
    {
        _preference.Selected = selected;
        ItemToggleButton.Pressed = selected;
    }

    private string GetName()
    {
        var locId = $"loadout-name-{Loadout.ID}";
        var name = Loc.GetString(locId);

        if (name == locId && PreviewEntity != null)
            name = _entity.GetComponent<MetaDataComponent>(PreviewEntity.Value).EntityName;

        if (_entity.TryGetComponent<LabelComponent>(PreviewEntity, out var label))
        {
            var itemLabel = label.CurrentLabel;
            if (!string.IsNullOrEmpty(itemLabel))
                name += $" ({Loc.GetString(itemLabel)})";
        }

        return name;
    }
}
