using Content.Shared._DV.CCVars;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;

namespace Content.Client._DEN.Options.UI.Tabs
{
    [GenerateTypedNameReferences]
    public sealed partial class ExtraTab : Control
    {
        [Dependency] private readonly IConfigurationManager _cfg = default!;

        public ExtraTab()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            ApplyButton.OnPressed += OnApplyButtonPressed;
            ResetButton.OnPressed += OnResetButtonPressed;

            AutoFillHighlightsCheckBox.Pressed = _cfg.GetCVar(DCCVars.ChatAutoFillHighlights);

            AttachUpdateChangesHandler(
                RedSlider,
                GreenSlider,
                BlueSlider,
                AutoFillHighlightsCheckBox
            );

            Reset();
            return;

            void AttachUpdateChangesHandler(params Control[] controls)
            {
                foreach (var control in controls)
                {
                    switch (control)
                    {
                        case Slider slider:
                            slider.OnValueChanged += _ => UpdateChanges();
                            break;
                        case CheckBox checkBox:
                            checkBox.OnToggled += _ => UpdateChanges();
                            break;
                    }
                }
            }
        }

        protected override void Dispose(bool disposing)
        {
            ApplyButton.OnPressed -= OnApplyButtonPressed;
            ResetButton.OnPressed -= OnResetButtonPressed;

            DetachUpdateChangesHandler(
                RedSlider,
                GreenSlider,
                BlueSlider,
                AutoFillHighlightsCheckBox
            );

            base.Dispose(disposing);
            return;

            void DetachUpdateChangesHandler(params Control[] controls)
            {
                foreach (var control in controls)
                {
                    switch (control)
                    {
                        case Slider slider:
                            slider.OnValueChanged -= _ => UpdateChanges();
                            break;
                        case CheckBox checkBox:
                            checkBox.OnToggled -= _ => UpdateChanges();
                            break;
                    }
                }
            }
        }


        private void OnApplyButtonPressed(BaseButton.ButtonEventArgs args)
        {
            Color newColor = new Color(RedSlider.Value / 255, GreenSlider.Value / 255, BlueSlider.Value / 255);

            string newColorHex = newColor.ToHex();

            _cfg.SetCVar(DCCVars.ChatHighlightsColor, newColorHex);
            _cfg.SetCVar(DCCVars.ChatAutoFillHighlights, AutoFillHighlightsCheckBox.Pressed);
            _cfg.SaveToFile();
            UpdateChanges();
        }

        private void OnResetButtonPressed(BaseButton.ButtonEventArgs args)
        {
            Reset();
        }

        private void Reset()
        {
            Color oldColor = Color.FromHex(_cfg.GetCVar(DCCVars.ChatHighlightsColor));

            // Todo Calculate values from CVar
            RedSlider.Value = oldColor.R * 255f;
            GreenSlider.Value = oldColor.G * 255f;
            BlueSlider.Value = oldColor.B * 255f;

            AutoFillHighlightsCheckBox.Pressed = _cfg.GetCVar(DCCVars.ChatAutoFillHighlights);
            UpdateChanges();
        }

        private void UpdateChanges()
        {
            ExampleLabel.FontColorOverride = new Color(RedSlider.Value / 255, GreenSlider.Value / 255, BlueSlider.Value / 255);

            Color color = Color.FromHex(_cfg.GetCVar(DCCVars.ChatHighlightsColor));

            // y'all need jesus.
            var isRedSliderSame =
                Math.Abs(RedSlider.Value - color.R * 255f) < 0.01f;
            var isGreenSliderSame =
                Math.Abs(GreenSlider.Value - color.G * 255f) < 0.01f;
            var isBlueSliderSame =
                Math.Abs(BlueSlider.Value - color.B * 255f) < 0.01f;

            var isAutoFillHighlightSame = AutoFillHighlightsCheckBox.Pressed == _cfg.GetCVar(DCCVars.ChatAutoFillHighlights);

            var isEverythingSame = isRedSliderSame && isGreenSliderSame && isBlueSliderSame && isAutoFillHighlightSame;
            ApplyButton.Disabled = isEverythingSame;
            ResetButton.Disabled = isEverythingSame;
            RedLabel.Text = RedSlider.Value.ToString();
            GreenLabel.Text = GreenSlider.Value.ToString();
            BlueLabel.Text = BlueSlider.Value.ToString();
        }
    }
}
