// SPDX-FileCopyrightText: 2024 DEATHB4DEFEAT <77995199+DEATHB4DEFEAT@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 VMSolidus <evilexecutive@gmail.com>
// SPDX-FileCopyrightText: 2024 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Cam <Nop>
// SPDX-FileCopyrightText: 2025 NeLepus <l3pusp3pus@gmail.com>
// SPDX-FileCopyrightText: 2025 Rosycup <178287475+Rosycup@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 dootythefrooty <awhunter8@gmail.com>
// SPDX-FileCopyrightText: 2025 portfiend <109661617+portfiend@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 sleepyyapril <123355664+sleepyyapril@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later AND MIT

using System.Linq;
using System.Numerics;
using System.Text;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Clothing.Loadouts.Systems;
using Content.Shared.Customization.Systems;
using Content.Shared.Guidebook;
using Content.Shared.Labels.Components;
using Content.Shared.Paint;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Lobby.UI;


[GenerateTypedNameReferences]
public sealed partial class LoadoutPreferenceSelector : Control
{
    public const string DefaultLoadoutInfoGuidebook = "LoadoutInfo";

    public EntityUid DummyEntityUid;

    private readonly IEntityManager _entityManager;
    private readonly IPrototypeManager _prototypeManager;
    private readonly CharacterRequirementsSystem _characterRequirements;
    private readonly IConfigurationManager _configManager;
    private readonly JobRequirementsManager _jobRequirements;

    private SpriteView _previewLoadout = null!;

    public LoadoutPrototype Loadout { get; }

    private LoadoutPreference _preference = null!;
    public LoadoutPreference Preference
    {
        get => _preference;
        set
        {
            _preference = value;
            NameEdit.Text = value.CustomName ?? "";
            DescriptionEdit.TextRope = new Rope.Leaf(value.CustomDescription ?? "");
            ColorEdit.Color = Color.FromHex(value.CustomColorTint, Color.White);
            if (value.CustomColorTint != null)
                UpdatePaint(new(DummyEntityUid, _entityManager.GetComponent<PaintedComponent>(DummyEntityUid)), _entityManager);
            HeirloomButton.Pressed = value.CustomHeirloom ?? false;
            PreferenceButton.Pressed = value.Selected;
        }
    }

    public bool Valid;
    private bool _showUnusable;
    public bool ShowUnusable
    {
        get => _showUnusable;
        set
        {
            _showUnusable = value;
            Visible = Valid && _wearable || _showUnusable;
            PreferenceButton.RemoveStyleClass(StyleBase.ButtonDanger);
            PreferenceButton.AddStyleClass(Valid ? "" : StyleBase.ButtonDanger);
        }
    }

    private bool _wearable;
    public bool Wearable
    {
        get => _wearable;
        set
        {
            _wearable = value;
            Visible = Valid && _wearable || _showUnusable;
            PreferenceButton.RemoveStyleClass(StyleBase.ButtonCaution);
            PreferenceButton.AddStyleClass(_wearable ? "" : StyleBase.ButtonCaution);
        }
    }

    public event Action<LoadoutPreference>? PreferenceChanged;

    public LoadoutPreferenceSelector(LoadoutPrototype loadout,
        JobPrototype highJob,
        HumanoidCharacterProfile profile,
        ref Dictionary<string, EntityUid> entities,
        IEntityManager entityManager,
        IPrototypeManager prototypeManager,
        IConfigurationManager configManager,
        CharacterRequirementsSystem characterRequirementsSystem,
        JobRequirementsManager jobRequirementsManager)
    {
        RobustXamlLoader.Load(this);

        _entityManager = entityManager;
        _prototypeManager = prototypeManager;
        _characterRequirements = characterRequirementsSystem;
        _configManager = configManager;
        _jobRequirements = jobRequirementsManager;

        Loadout = loadout;

        HeirloomButton.Visible = loadout.CanBeHeirloom;
        SpecialMenu.Visible = Loadout.CustomName || Loadout.CustomDescription || Loadout.CustomColorTint;
        SpecialName.Visible = Loadout.CustomName;
        SpecialDescription.Visible = Loadout.CustomDescription;
        SpecialColorTintToggle.Visible = Loadout.CustomColorTint;
        InitializeGuidebook();

        var dummyLoadoutItem = EnsureDummyItem(ref entities);
        DummyEntityUid = dummyLoadoutItem;

        var dummyMeta = _entityManager.GetComponent<MetaDataComponent>(DummyEntityUid);
        var loadoutName = GetName(dummyMeta);
        var loadoutDesc = GetDescription(dummyMeta);
        InitializeTooltip(loadoutDesc, highJob, profile);

        var loadoutContainer = InitializeLoadoutContainer(loadoutName);
        PreferenceButton.AddChild(loadoutContainer);

        NameEdit.PlaceHolder = loadoutName;
        DescriptionEdit.Placeholder = new Rope.Leaf(Loc.GetString(loadoutDesc));

        PreferenceButton.OnToggled += args =>
        {
            _preference.Selected = args.Pressed;
            PreferenceChanged?.Invoke(Preference);
        };

        HeirloomButton.OnToggled += args =>
        {
            _preference.CustomHeirloom = args.Pressed ? true : null;
            PreferenceChanged?.Invoke(Preference);
        };

        SaveButton.OnPressed += _ =>
        {
            _preference.CustomColorTint = SpecialColorTintToggle.Pressed ? ColorEdit.Color.ToHex() : null;
            _preference.Selected = PreferenceButton.Pressed;
            PreferenceChanged?.Invoke(Preference);
        };

        NameEdit.OnTextChanged += _ =>
            _preference.CustomName = string.IsNullOrEmpty(NameEdit.Text) ? null : NameEdit.Text;

        DescriptionEdit.OnTextChanged += _ =>
            _preference.CustomDescription = string.IsNullOrEmpty(Rope.Collapse(DescriptionEdit.TextRope))
                ? null
                : Rope.Collapse(DescriptionEdit.TextRope);

        SpecialColorTintToggle.OnToggled += args =>
            ColorEdit.Visible = args.Pressed;

        ColorEdit.OnColorChanged += _ =>
        {
            _preference.CustomColorTint = SpecialColorTintToggle.Pressed
                ? ColorEdit.Color.ToHex()
                : null;

            if (_entityManager.TryGetComponent<PaintedComponent>(dummyLoadoutItem, out var paint))
                UpdatePaint(new Entity<PaintedComponent>(dummyLoadoutItem, paint), entityManager);
        };
    }

    private void InitializeTooltip(string loadoutDesc,
        JobPrototype highJob,
        HumanoidCharacterProfile profile)
    {
        var tooltip = new StringBuilder();
        if (!string.IsNullOrEmpty(loadoutDesc))
            tooltip.Append($"{Loc.GetString(loadoutDesc)}");

        _characterRequirements.CheckRequirementsValid(
            Loadout.Requirements,
            highJob,
            profile,
            new Dictionary<string,
            TimeSpan>(),
            _jobRequirements.IsWhitelisted(),
            Loadout,
            _entityManager,
            _prototypeManager,
            _configManager,
            out var reasons);

        foreach (var reason in reasons)
            tooltip.Append($"\n{reason}");

        if (tooltip.Length > 0)
        {
            var formattedTooltip = new Tooltip();
            formattedTooltip.SetMessage(FormattedMessage.FromMarkupPermissive(tooltip.ToString()));
            PreferenceButton.TooltipSupplier = _ => formattedTooltip;
        }
    }

    private BoxContainer InitializeLoadoutContainer(string loadoutName)
    {
        var costLabel = new Label
        {
            Text = Loadout.Cost.ToString(),
            StyleClasses = { StyleBase.StyleClassLabelHeading },
            MinWidth = 32,
            MaxWidth = 32,
            ClipText = true,
            Margin = new Thickness(0, 0, 8, 0),
        };

        var iconContainer = new PanelContainer
        {
            PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex("#2f2f2f") },
            Children = { _previewLoadout },
        };

        var loadoutNameLabel = new Label
        {
            Text = loadoutName,
            Margin = new Thickness(8, 0, 0, 0),
        };

        var loadoutContainer = new BoxContainer
        {
            Children = { costLabel, iconContainer, loadoutNameLabel },
        };

        return loadoutContainer;
    }

    private EntityUid EnsureDummyItem(ref Dictionary<string, EntityUid> entities)
    {
        var previewKey = $"{Loadout.ID}_0";

        if (!entities.TryGetValue(previewKey, out var dummyLoadoutItem))
        {
            dummyLoadoutItem = _entityManager.SpawnEntity(Loadout.Items.First(), MapCoordinates.Nullspace);
            _entityManager.EnsureComponent<AppearanceComponent>(dummyLoadoutItem);
            _entityManager.EnsureComponent<PaintedComponent>(dummyLoadoutItem);
            entities.Add(previewKey, dummyLoadoutItem);
        }

        _previewLoadout = new SpriteView
        {
            Scale = new Vector2(2, 2),
            OverrideDirection = Direction.South,
            VerticalAlignment = VAlignment.Center,
            SizeFlagsStretchRatio = 1
        };

        _previewLoadout.SetEntity(dummyLoadoutItem);
        return dummyLoadoutItem;
    }

    private string GetName(MetaDataComponent metadata)
    {
        var locId = $"loadout-name-{Loadout.ID}";
        var name = Loc.GetString(locId);

        if (name == locId)
            name = metadata.EntityName;

        if (_entityManager.TryGetComponent(DummyEntityUid, out LabelComponent? labelComponent))
        {
            var itemLabel = labelComponent.CurrentLabel;
            if (!string.IsNullOrEmpty(itemLabel))
                name += $" ({Loc.GetString(itemLabel)})";
        }

        return name;
    }

    private string GetDescription(MetaDataComponent metadata)
    {
        var locId = $"loadout-description-{Loadout.ID}";
        var description = Loc.GetString(locId);

        if (description == locId)
            description = metadata.EntityDescription ?? description;

        return description;
    }

    private void UpdateGuidebook()
    {
        var visible = !string.IsNullOrEmpty(Loadout.GuideEntry)
            && _prototypeManager.HasIndex<GuideEntryPrototype>(Loadout.GuideEntry);
        GuidebookButton.Visible = visible;
    }

    private void InitializeGuidebook()
    {
        _prototypeManager.PrototypesReloaded += _ => UpdateGuidebook();
        UpdateGuidebook();

        GuidebookButton.OnPressed += _ =>
        {
            if (string.IsNullOrEmpty(Loadout.GuideEntry)
                || !_prototypeManager.TryIndex<GuideEntryPrototype>(Loadout.GuideEntry, out var guideRoot))
                return;

            var guidebookController = UserInterfaceManager.GetUIController<GuidebookUIController>();

            //TODO: Don't close the guidebook if its already open, just go to the correct page
            guidebookController.OpenGuidebook(
                new Dictionary<ProtoId<GuideEntryPrototype>, GuideEntry>
                {
                    { Loadout.GuideEntry, guideRoot }
                },
                includeChildren: true,
                selected: Loadout.GuideEntry);
        };
    }

    private bool _initialized;
    protected override void FrameUpdate(FrameEventArgs args)
    {
        if (_initialized || SpecialMenu.Heading == null)
            return;

        // Move the special editor
        var heading = SpecialMenu.Heading;
        heading.Orphan();
        ButtonGroup.AddChild(heading);
        GuidebookButton.Orphan();
        ButtonGroup.AddChild(GuidebookButton);

        // These guys are here too for reasons
        HeadingButton.SetHeight = HeirloomButton.SetHeight = GuidebookButton.SetHeight = PreferenceButton.Size.Y;
        SpecialColorTintToggle.Pressed = ColorEdit.Visible = _preference.CustomColorTint != null;

        _initialized = true;
    }

    private void UpdatePaint(Entity<PaintedComponent> entity, IEntityManager entityManager)
    {
        if (_preference.CustomColorTint != null)
        {
            entity.Comp.Color = Color.FromHex(_preference.CustomColorTint);
            entity.Comp.Enabled = true;
        }
        else
            entity.Comp.Enabled = false;

        var app = entityManager.System<SharedAppearanceSystem>();
        app.TryGetData(entity, PaintVisuals.Painted, out bool value);
        app.SetData(entity, PaintVisuals.Painted, !value);
    }
}
