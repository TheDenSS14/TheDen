using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Content.Shared.Consent;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Network;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Consent.UI.Windows;

[GenerateTypedNameReferences]
public sealed partial class ConsentWindow : FancyWindow
{
    [Dependency] private readonly IClientConsentManager _consentManager = default!;
    [Dependency] private readonly IConfigurationManager _configManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;

    private event Action<Guid, string, bool>? OnConsentPermissionChanged;

    private readonly List<EntryState> _entries = new();
    private ConsentPermissions? _consentPermissions;

    public ConsentWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SaveConsentSettings.OnPressed += _ =>
        {
            SaveConsentSettings.Disabled = true;
            _consentManager.UpdateConsent(GetSettings());
        };

        _consentManager.OnServerDataLoaded += UpdateUi;
        if (_consentManager.HasLoaded)
            UpdateUi();

        ConsentFreetext.Placeholder = new Rope.Leaf(Loc.GetString("consent-window-freetext-placeholder"));
        ConsentFreetext.OnTextChanged += _ => UnsavedChanges();

        PopulatePermissions();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
            _consentManager.OnServerDataLoaded -= UpdateUi;
    }

    private PlayerConsentSettings GetSettings()
    {
        var text = Rope.Collapse(ConsentFreetext.TextRope);
        var toggles = new Dictionary<ProtoId<ConsentTogglePrototype>, string>();
        var permissions = _consentPermissions ?? new ConsentPermissions();

        foreach (var entry in _entries)
        {
            if (entry.Button != null && entry.Button.Pressed)
                toggles[entry.Consent.ID] = entry.Consent.DefaultValue ? "on" : "off";
        }

        return new(text, toggles, permissions);
    }

    private void UnsavedChanges()
    {
        // Validate freetext length
        var maxLength = _configManager.GetCVar(CCVars.ConsentFreetextMaxLength);
        var length = Rope.Collapse(ConsentFreetext.TextRope).Length;

        if (length > maxLength)
        {
            SaveLabel.Text = Loc.GetString("consent-window-char-limit-warning", ("length", length), ("maxLength", maxLength));
            SaveConsentSettings.Disabled = true;

            return;
        }

        // If everything is valid, enable save button and inform user they need to save.
        SaveLabel.Text = Loc.GetString("consent-window-unsaved-changes");
        SaveConsentSettings.Disabled = false;
    }

    private void AddConsentEntry(ConsentTogglePrototype prototype)
    {
        var state = new EntryState { Consent = prototype };
        var container = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Vertical };

        var header = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            Margin = new Thickness(5f, 5f)
        };

        var name = new Label
        {
            Text = Loc.GetString($"consent-{prototype.ID}-name"),
            HorizontalExpand = true
        };

        var buttonOff = new Button { Text = "Off" };
        buttonOff.StyleClasses.Add("OpenRight");
        buttonOff.Pressed = !prototype.DefaultValue;

        var buttonOn = new Button { Text = "On" };
        buttonOn.StyleClasses.Add("OpenLeft");
        buttonOn.Pressed = prototype.DefaultValue;
        state.Button = buttonOn;

        buttonOff.OnPressed += _ => ButtonOnPress(buttonOff, buttonOn);
        buttonOn.OnPressed += _ => ButtonOnPress(buttonOn, buttonOff);

        var consent = _consentManager.GetConsent();
        foreach (var toggle in consent.Toggles)
        {
            if (toggle.Key == prototype.ID && toggle.Value == "on")
            {
                buttonOn.Pressed = true;
                buttonOff.Pressed = false;
                continue;
            }
        }

        header.AddChild(name);
        header.AddChild(buttonOff);
        header.AddChild(buttonOn);

        container.AddChild(header);

        var desc = new Label
        {
            Text = Loc.GetString($"consent-{prototype.ID}-desc"),
        };

        container.AddChild(desc);

        var wrapper = new PanelContainer();
        wrapper.StyleClasses.Add("PdaBorderRect");

        wrapper.AddChild(container);
        ConsentList.AddChild(wrapper);

        _entries.Add(state);
    }

    private void PopulatePermissions()
    {
        var permissions = new List<ConsentOption>();

        foreach (var proto in _protoManager.EnumeratePrototypes<ConsentTogglePrototype>())
        {
            var option = new ConsentOption();
            option.ConsentToggleId = proto.ID;
            option.HasConsent = proto.DefaultValue;

            permissions.Add(option);
        }

        var control = BuildFakeUserInfo(permissions);
        Permissions.AddChild(control);

        // foreach (var permissions in _consentPermissions.Value.SpecifiedConsents)
        // {
        //     BuildUserInfo(permissions);
        // }
    }

    private Control BuildFakeUserInfo(List<ConsentOption> permissions)
    {
        var collapsible = new Collapsible();
        var header = new CollapsibleHeading();
        var removeButton = new Button { Text = "Remove" };
        // header.Title = data?.UserName;
        header.Title = "Meow";
        header.AddChild(removeButton);

        var body = new CollapsibleBody();
        var consents = FakeGetUserConsents(permissions);
        body.AddChild(consents);

        collapsible.BodyVisible = false;
        collapsible.AddChild(header);
        collapsible.AddChild(body);

        return collapsible;
    }

    private Control FakeGetUserConsents(List<ConsentOption> consents)
    {
        var container = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            VerticalExpand = true,
            MinSize = new(0, 20)
        };

        foreach (var consentOption in consents)
        {
            var consentContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                MinSize = new(0, 20)
            };

            var consentName = Loc.GetString($"consent-{consentOption.ConsentToggleId}-name");
            var name = new Label { Text = consentName, MinSize = new(0, 20) };
            var control = new Control { HorizontalExpand = true, MinSize = new(0, 20) };

            var buttonOff = new Button { Text = "Off", MinSize = new(0, 20) };
            buttonOff.StyleClasses.Add("OpenRight");
            buttonOff.Pressed = consentOption.HasConsent == false;

            var buttonOn = new Button { Text = "On", MinSize = new(0, 20) };
            buttonOn.StyleClasses.Add("OpenLeft");
            buttonOn.Pressed = consentOption.HasConsent;

            buttonOff.OnPressed += _ => ButtonOnPress(buttonOff, buttonOn);
            buttonOn.OnPressed += _ => ButtonOnPress(buttonOn, buttonOff);

            consentContainer.AddChild(name);
            consentContainer.AddChild(control);
            consentContainer.AddChild(buttonOff);
            consentContainer.AddChild(buttonOn);

            container.AddChild(consentContainer);
        }

        return container;
    }

    private void BuildUserInfo(KeyValuePair<Guid, List<ConsentOption>> permissions)
    {
        var foundName = _playerManager.TryGetPlayerData((NetUserId) permissions.Key, out var data);

        // if (!foundName)
        //     return;

        var collapsible = new Collapsible();
        var header = new CollapsibleHeading();
        var removeButton = new Button { Text = "Remove" };
        // header.Title = data?.UserName;
        header.Title = "Meow";
        header.AddChild(removeButton);

        var body = new CollapsibleBody();
        var consents = GetUserConsents(permissions);
        body.AddChild(consents);

        collapsible.BodyVisible = false;
        collapsible.AddChild(header);
        collapsible.AddChild(body);
    }

    private Control GetUserConsents(KeyValuePair<Guid, List<ConsentOption>> permissions)
    {
        var container = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Horizontal, VerticalExpand = true };

        foreach (var consentOption in permissions.Value)
        {
            var consentContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                VerticalExpand = true,
                MinSize = new(0, 20)
            };

            var consentName = Loc.GetString($"consent-{consentOption.ConsentToggleId}-name");
            var name = new Label { Text = consentName, MinSize = new(0, 20) };
            var control = new Control { HorizontalExpand = true, MinSize = new(0, 20) };

            var buttonOff = new Button { Text = "Off", MinSize = new(0, 20) };
            buttonOff.StyleClasses.Add("OpenRight");
            buttonOff.Pressed = consentOption.HasConsent == false;

            var buttonOn = new Button { Text = "On", MinSize = new(0, 20) };
            buttonOn.StyleClasses.Add("OpenLeft");
            buttonOn.Pressed = consentOption.HasConsent;

            buttonOff.OnPressed += _ => PermissionButtonOnPress(buttonOff, buttonOn, permissions.Key, consentOption);
            buttonOn.OnPressed += _ => PermissionButtonOnPress(buttonOn, buttonOff, permissions.Key, consentOption);

            consentContainer.AddChild(name);
            consentContainer.AddChild(control);
            consentContainer.AddChild(buttonOff);
            consentContainer.AddChild(buttonOn);

            container.AddChild(consentContainer);
        }

        return container;
    }

    private void PermissionButtonOnPress(Button button, Button otherButton, Guid playerId, ConsentOption option)
    {
        OnConsentPermissionChanged?.Invoke(playerId, option.ConsentToggleId, option.HasConsent);
        ButtonOnPress(button, otherButton);
    }

    private void ButtonOnPress(Button currentButton, Button otherButton)
    {
        currentButton.Pressed = true;
        otherButton.Pressed = false;
        UnsavedChanges();
    }

    public void UpdateUi()
    {
        var consent = _consentManager.GetConsent();

        ConsentFreetext.TextRope = new Rope.Leaf(consent.Freetext);
        ConsentList.RemoveAllChildren();
        _entries.Clear();

        var consentprototypelist = _protoManager.EnumeratePrototypes<ConsentTogglePrototype>();
        foreach (var prototype in consentprototypelist)
            AddConsentEntry(prototype);

        _consentPermissions = consent.Permissions;

        SaveConsentSettings.Disabled = true;
        SaveLabel.Text = "";
    }

    private struct EntryState
    {
        public ConsentTogglePrototype Consent;
        public Button? Button;
    }

    public enum ConsentToggle
    {
        On,
        Off
    }
}
