# SPDX-FileCopyrightText: 2025 Aiden
# SPDX-FileCopyrightText: 2025 Aidenkrz
# SPDX-FileCopyrightText: 2025 MajorMoth
# SPDX-FileCopyrightText: 2025 sleepyyapril
#
# SPDX-License-Identifier: AGPL-3.0-or-later

name: Update REUSE Headers
on:
  pull_request_target:
    types: [closed]
    branches:
      - master

env:
  REUSE_MESSAGE: ${{ vars.REUSE_MESSAGE }}
  CHANGELOG_USER: ${{ vars.CHANGELOG_USER }}
  CHANGELOG_EMAIL: ${{ vars.CHANGELOG_EMAIL }}

jobs:
  update_headers:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Master
        uses: actions/checkout@v4
        with:
          ref: ${{ vars.CHANGELOG_BRANCH }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tqdm

      - name: Run REUSE Header Update Script
        run: | # this should handle both normal merges and squash merges
          MERGE_SHA="${{ github.event.pull_request.merge_commit_sha }}"
          if [ -z "$MERGE_SHA" ]; then
            MERGE_SHA="${{ github.event.pull_request.head.sha }}"
          fi
          python Tools/reuse_utilities/reuse_update_headers_from_merge.py $MERGE_SHA
        working-directory: ${{ github.workspace }}

      - name: Commit and push changes
        run: |
          git config user.name "${{ env.CHANGELOG_USER }}"
          git config user.email "${{ env.CHANGELOG_EMAIL }}"
          git add -A

          GIT_COMMIT_OUTPUT=$(git commit -m "${{ env.REUSE_MESSAGE }}" 2>&1)
          GIT_COMMIT_EXIT_CODE=$?

          if echo "$GIT_COMMIT_OUTPUT" | grep -q "nothing to commit"; then
              echo "No changes to commit"
              exit 0
          elif [ $GIT_COMMIT_EXIT_CODE -ne 0 ]; then
              echo "Commit failed"
              echo "$GIT_COMMIT_OUTPUT"
              exit 1
          fi

          for i in {1..5}; do
            git pull --rebase origin ${{ vars.CHANGELOG_BRANCH }} || exit 1
            if git push origin ${{ vars.CHANGELOG_BRANCH }}; then
              echo "Push succeeded"
              exit 0
            fi
            echo "Push failed, retrying in 5s..."
            sleep 5
          done
          echo "Push failed after 5 attempts."
          exit 1
